%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DECLARATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[12pt,czech]{article}
\usepackage{graphicx}
\usepackage[T1]{fontenc}
\usepackage{babel}
\usepackage[utf8]{inputenc} % set coding
\usepackage{czech}
\usepackage[legalpaper, portrait, margin=0.8in]{geometry}
\usepackage{fixltx2e}
\usepackage{hyperref}
\usepackage{textgreek}
\usepackage{textcomp}
\usepackage{adjustbox}
\usepackage{float}

\author{
  Kulíšek, Vojtěch\\
  \texttt{xkulis03@stud.fit.vutbr.cz}
  \and
  Plevač, Lukáš\\
  \texttt{xpleva07@stud.fit.vutbr.cz}
  \and
  Šesták, Pavel\\
  \texttt{xsesta07@stud.fit.vutbr.cz}
}

\title{Implementace překladače imperativního jazyka IFJ20}
\date{12.11.2020}  


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TITLE PAGE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
  \begin{titlepage}
		\begin{center}
			%\textsc{\LARGE Vysoké Učení Technické v Brně} \\[0.5cm]
			%{\LARGE Fakulta informačních technologií}

			\begin{figure}
				\center\includegraphics[scale=0.3]{images/logo.png}
			\end{figure}

			\vspace{3cm}

			\textsc{\LARGE Formální jazyky a překladače	} \\[0.5cm]
			\textsc{\LARGE 2020/2021} \\[3.5cm]

			\textbf{\LARGE Implementace překladače imperativního jazyka IFJ20} \\
			\vspace{3cm}
			{\Large Tým 018, varianta II}	
		    \vspace{3cm}
		    
		    {\Large Vedoucí projektu: Šesták Pavel(xsesta07)} \\[0.5cm]
		    
			{\Large Spoluřešítelé: Kulíšek Vojtěch(xkulis03), Plevač Lukáš(xpleva07)}
			
			\vspace{3cm}
                
		    \textsc{}{\LARGE Brno, \today}

		\end{center}
	\end{titlepage}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CONTENT TABLE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{center}
	\tableofcontents %content generate
	\clearpage %end of page
\end{center}
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION INTRO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Úvod}
	\subsection{Komunikace mezi moduly}
	Komunikace mezi moduly probíhá převážně přes soubor globálních proměnných definovaných v rámci \textit{global\_variables.h}. Token reprezentuje aktuální zpracovávaný token od lexikální analýzy (Sekce 3 - Lexikální analyzátor). Proměnná \textit{symtable} reprezentuje tabulku symbolů (Sekce 5.1 - Tabulka symbolů). Precedence\_stack je globální zásobník pro precedenční analýzu zdola nahoru, použitou pro analýzu logických výrazů. Data\_type\_queue je fronta datových typů, která je použita u přiřazování výrazů do proměnných při kontrole datových typů. S frontou token\_queue pracuje část syntaktické analýzy implementován rekurzivním sestupem a ukládá do ní tokeny do kterých se bude přiřazovat z důvodu kontroly datových typů.
	
	\subsection{Návratové hodnoty aplikace}
	    Návratové hodnoty explicitně vyplývají ze zadání a jejich definice je součástí hlavičkového souboru \textit{error\_codes.h}.
	
	\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION TEAM WORK %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Práce v týmu}
    Práce na projektu probíhala v týmu, jehož složení je konstantní od začátku studia. Pro verzování projektu jsme zvolili git hostovaný na portálu GitLab. Kořenový adresář projektu je rozdělen do čtyř složek, pro oddělení jednotlivých částí projektu. Složka \textit{/doc} obsahuje popis těchto složek, dokumentaci v TeXu a popis jak je formátován zdrojový kód v rámci projektu. Druhá sekce \textit{/include} obsahuje hlavičkové soubory s definicemi a externími funkcemi s komentářem, které slouží pro komunikaci mezi jednotlivými moduly. Sekce \textif{/src} obsahuje zdrojové soubory překladače. Poslední sekcí je \textit{/tests}, v rámci které jsou implementovány automatické testy na jednotlivé moduly a datové struktury. Při commitu byl využit pipelining pro build a následné provedení automatických testů. Komunikace ohledně projektu probíhala skrz Facebookovou skupinu a schůzky pořádané na platformě Discord. Práce byla rozdělena do separátních bloků, které byly rozděleny průběžně mezi členy týmu. Schůzky probíhali převážně z důvodu upřesnění funkcionality daných modulů a integrace jednotlivých modulů do funkčního celku.
\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION LEXICAL ANALYZER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Lexikální analyzátor}

        První blok překladače je lexikální analyzátor známý také jako skener. Jeho úkolem je rozložit zdrojový kód ze standardního vstupu na sekvenci tokenů. Lexikální analyzátor byl implementován pomocí konečného automatu(Obrázek 1). Konečné stavy automatu reprezentují jednotlivé tokeny. V případě, že automat se nachází v koncovém stavu a znak na vstupu není schopný zpracovat, vrací token do syntaktického analyzátoru. V opačném případě kdy automat není schopen znak přijmout a automat se nenachází v koncovém stavu končí překlad na lexikální chybu. Každý stav je reprezentován funkcí a aktuální stav je uložen pomocí ukazatele na funkci.\\
        Stavy konečného automatu byly reprezentovány funkcemi, kdy další stav byl uložen v ukazateli na funkci, který byl volán v hlavní smyčce. Konečný automat je doplněn mnoha boolovskými proměnnými, které mu pomáhají se rozhodovat, zda-li číst další znak ze vstupu nebo zda byl načten již kompletní token.\\
        Token je reprezentován strukturou obsahují informace o typu tokenu, jeho atributu a datovém typu. Jako atribut se rozumí hodnota literálu či název identifikátoru. Typ tokenu a datový typ je realizován pomocí výčtového typu. Atribut je realizován pomocí datového typu union. \\
        Komunikační rozhraní s lexikálním analyzátorem je pomocí funkce \textit{get\_token()}, která aktualizuje hodnotu globální proměnné token.\\
        Lexikální analyzátor má počítadlo aktuálního řádku \textit{lex\_line\_counter}, které je přístupné syntaktické i sémantické analýze při chybovém výstupu pro informování uživatele, na kterém řádku byl překlad ukončen. \\
        
    \clearpage
    \begin{figure}
        \begin{center}
            \caption{Návrh konečného automatu pro lexikální analyzátor }
            \hfill\includegraphics[scale=0.17]{images/FSM_IFJ.jpg}\hspace*{\fill}
        \end{center}
    \end{figure}
    
\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION SYNTAX ANALYZER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Syntaktický analyzátor}
    Syntaktická analýza řídí překlad a je rozdělena do dvou celků - analýza pomocí rekurzivního sestupu a precedenční analýzy.
    Hlavní část syntaktické analýzy je implementována rekurzivním sestupem, kde každý neterminál reprezentuje samostatnou funkci. Syntaktická analýza volá lexikální analyzátor, který jí vrací další token ze vstupu. V rámci rekurzivního sestupu se snaží pokračovat na základě tokenu podle jednoho z pravidel definovaných v rámci LL gramatiky. V případě, že narazí na výraz tak syntaktický analyzátor volá precedenční analýzu, která výraz vyhodnotí a uloží datový typ na zásobník datových typů. Syntaktická analýza provede kontrolu datových typů. V průběhu simulace derivačního stromu se volají sémantické kontroly a provádí se generování cílového kódu.
    
    \subsection{Rekurzivní sestup}
    Rekurzivní sestup syntaktické analýzy je implementován v rámci souboru \textit{syntax\_analyzer.c}. 
    
    \subsubsection{LL gramatika}
    G\textsubscript{LL} = (N, \textSigma, P, E) \newline \newline
    N = \{ <statement>, <can\_EOL>, <expression>, <multy\_assign>, <expression\_list>, \newline <param\_list>, <param>, <comparison>, <expression>, <rel\_operator>, <for\_declaration>, <for\_comparison>, <for\_assignment>, <func>, <param\_define>, <return\_list>, \newline
    <return\_data\_type>, <data\_type>, <mu\_param\_define>, <prolog> \} \newline \newline
    \textSigma = \{ T\_EOF, T\_ELSE, T\_FLOAT64, T\_FOR, T\_FUNC, T\_IF, T\_INT, T\_PACKAGE, T\_RETURN, T\_STRING, T\_ID, T\_NUM\_L, T\_FLOAT\_L, T\_STRING\_L, T\_COMMA, T\_CBRK\_R, T\_CBRK\_L, T\_SEMCOL, T\_SUB, T\_ADD, T\_NE, T\_MUL, T\_E, T\_GE, T\_G, T\_EOL, T\_LE, T\_L, T\_BRK\_R, T\_ASSIGN, T\_DECLARE, T\_BRK\_L, T\_DIV \} \newline \newline
    P = \{ \newline
1: <can\_EOL> → ε \newline
2: <can\_EOL> → T\_EOL <can\_EOL> \newline
3: <prolog> → <can\_EOL> T\_PACKAGE main T\_EOL <func>  //define package \newline
4: <func> → <can\_EOL> T\_FUNC T\_ID T\_BRK\_L <param\_define> T\_BRK\_R <return\_list> T\_CBRK\_L <statement> T\_CBRK\_R <can\_EOL> <func> \newline
5: <func> → T\_EOF \newline
6: <param\_define> → ε \newline
7: <param\_define> → T\_ID <data\_type> \newline
8: <param\_define> → T\_ID <data\_type> T\_COMMA \newline <mu\_param\_define>
9: <mu\_param\_define> → T\_ID <data\_type> \newline
10: <mu\_param\_define> → T\_ID <data\_type> T\_COMMA <mu\_param\_define> \newline
11: <return\_list> → T\_BRK\_L <return\_data\_type> T\_BRK\_R \newline
12: <return\_list> → ε \newline
13: <data\_type> → T\_INT \newline
14: <data\_type> → T\_FLOAT64 \newline
15: <data\_type> → T\_STRING \newline
16: <return\_data\_type> → <data\_type> \newline
17: <return\_data\_type> → <data\_type> T\_COMMA  <return\_data\_type> \newline
18: <statement> → <can\_EOL> \newline
19: <statement> → ε \newline
20: <statement> → <can\_EOL> T\_ID T\_DECLARE <can\_EOL> <expression> T\_EOL <statement> \newline
21: <statement> →<can\_EOL> T\_ID <multy\_assign> T\_ASSIGN <can\_EOL> <expression\_list> T\_EOL <statement> \newline
22: <multy\_assign> → ε \newline
23: <multy\_assign> → T\_COMMA <can\_EOL> T\_ID <multy\_assign> \newline
24: <statement> → <can\_EOL> T\_ID T\_BRK\_L <can\_EOL> <param\_list> T\_BRK\_R T\_EOL <statement> \newline
25: <statement> → <can\_EOL> T\_ID T\_BRK\_L T\_BRK\_R  T\_EOL <statement> \newline
28: <param\_list> → <param> \newline
29: <param\_list> → <param> T\_COMMA <can\_EOL> <param\_list> \newline
30: <param> → T\_STRING\_L \newline
31: <param> → T\_ID \newline
32: <param> → T\_NUM\_L\newline
33: <param> → T\_FLOAT\_L\newline
34: <statement> → <can\_EOL> T\_IF <comparison>  T\_CBRK\_L T\_EOL <statement>  T\_CBRK\_R T\_ELSE T\_CBRK\_L T\_EOL <statement> T\_CBRK\_R T\_EOL <statement>\newline
35: <comparison> → <expression> <rel\_operator> <can\_EOL> <expression>  \newline
36: <rel\_operator> → T\_L\newline
37: <rel\_operator> → T\_LE\newline
38: <rel\_operator> → T\_G\newline
39: <rel\_operator> → T\_GE\newline
40: <rel\_operator> → T\_E\newline
41: <rel\_operator> → T\_NE\newline
42: <statement> → <can\_EOL> T\_FOR <for\_declaration> T\_SEMCOL <for\_comparison>  T\_SEMCOL  <for\_assignment>  T\_CBRK\_L T\_EOL <statement> T\_CBRK\_R T\_EOL <statement>\newline
43: <for\_declaration> → T\_ID T\_DECLARE <can\_EOL> <expression>\newline
44: <for\_declaration> → ε\newline
45: <for\_comparison> → <comparison>\newline
46: <for\_comparison> → ε\newline
47: <for\_assignment> → T\_ID <multy\_assign> T\_ASSIGN <can\_EOL> <expression\_list>\newline
48: <for\_assignment> → ε\newline
49: <statement> → <can\_EOL> T\_RETURN <expression\_list> T\_EOL <statement>\newline
50: <statement> → <can\_EOL> T\_RETURN T\_EOL <statement>\newline
51: <expression\_list> → <expression>\newline
52: <expression\_list> → <expression> T\_COMMA <expression\_list>\newline
 \newline
    \} \newline \newline
    E = \{ <prolog> \}
    
    \clearpage
    \subsection{Precedenční analýza}
    
    Precedenční analýza zdola nahoru je v rámci překladače využita k analýze výrazů. Analýza výrazu je implementována v rámci souboru \textit{expression\_analyser.c} a přístupná přes volání \textit{expression\_analyser()}. Uchovává indexy do precedenční tabulky, a implementuje práci se zásobníkem pomocí pravidel definovaných v tabulce. Výsledný datový typ výrazu je uložen do fronty datových typů.
    
    \subsubsection{Gramatika pro precedenční analýzu}
    G\textsubscript{exp} = (N, \textSigma, P, E) \newline \newline
    N = \{ <E> \} \newline \newline
    \textSigma = \{ T\_NUM\_L, T\_FLOAT\_L, T\_STRING\_L, T\_ID,
    T\_ADD, T\_SUB, T\_MUL, T\_DIV, T\_BRK\_L, T\_BRK\_R, T\_EOF \} \newline \newline
    P = \{ \newline
    1: <E> → <E> T\_ADD <E> \newline
    2: <E> → <E> T\_SUB <E> \newline
    3: <E> → <E> T\_MUL <E> \newline
    4: <E> → <E> T\_DIV <E> \newline
    5: <E> → T\_BRK\_L <E> T\_BRK\_R \newline
    6: <E> → T\_NUM\_L \newline
    7: <E> → T\_FLOAT\_L \newline
    8: <E> → T\_STRING\_L \newline
    9: <E> → T\_ID \newline
    \} \newline \newline
    E = \{ <E> \}
    
    \subsubsection{Precedenční tabulka}
    Precedenční tabulka je implementována jako dvou rozměrné pole znaků
    \begin{table}[H]
    \begin{adjustbox}{width=1\textwidth}
    \begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|}
    \hline
                 & T\_NUM\_L & T\_FLOAT\_L & T\_STRING\_L & T\_ID & T\_ADD & T\_SUB & T\_MUL & T\_DIV & T\_BRK\_L & R\_BRK\_R & T\_EOF \\ \hline
    T\_NUM\_L    & \_        & \_          & \_           & \_    & {]}    & {]}    & {]}    & {]}    & \_        & {]}       & {]}    \\ \hline
    T\_FLOAT\_L  & \_        & \_          & \_           & \_    & {]}    & {]}    & {]}    & {]}    & \_        & {]}       & {]}    \\ \hline
    T\_STRING\_L & \_        & \_          & \_           & \_    & {]}    & {]}    & {]}    & {]}    & \_        & {]}       & {]}    \\ \hline
    T\_ID        & \_        & \_          & \_           & \_    & {]}    & {]}    & {]}    & {]}    & \_        & {]}       & {]}    \\ \hline
    T\_ADD       & {[}       & {[}         & {[}          & {[}   & {]}    & {]}    & {[}    & {[}    & {[}       & {]}       & {]}    \\ \hline
    T\_SUB       & {[}       & {[}         & {[}          & {[}   & {]}    & {]}    & {[}    & {[}    & {[}       & {]}       & {]}    \\ \hline
    T\_MUL       & {[}       & {[}         & {[}          & {[}   & {]}    & {]}    & {]}    & {]}    & {[}       & {]}       & {]}    \\ \hline
    T\_DIV       & {[}       & {[}         & {[}          & {[}   & {]}    & {]}    & {]}    & {]}    & {[}       & {]}       & {]}    \\ \hline
    T\_BRK\_L    & {[}       & {[}         & {[}          & {[}   & {[}    & {[}    & {[}    & {[}    & {[}       & =         & \_     \\ \hline
    T\_BRK\_R    & \_        & \_          & \_           & \_    & {]}    & {]}    & {]}    & {]}    & \_        & {]}       & {]}    \\ \hline
    T\_EOF       & {[}       & {[}         & {[}          & {[}   & {[}    & {[}    & {[}    & {[}    & {[}       & \_        & \_ \\
     \hline
    \end{tabular}
    \end{adjustbox}
    \end{table}
    
    
    
    \clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION SEMANTIC ANALYZATOR %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Sémantický analyzátor}
    Sémantický analyzátor je volán syntaktickým analyzátorem. Kontroluje korektní volání funkcí a jejich deklarace.
    \subsection{Tabulka symbolů}
    Tabulka symbolů podle naší verze zadání měla být implementována jako hashovací tabulka. Položka hashovací tabulky je definována jako datový typ \textit{symtable\_item\_T}, který v sobě uschovává informace o datovém typu, názvu a zda byla již deklarovaná proměnná. V případě funkcí ještě nese informaci o datových typech parametrů a návratových hodnot. V rámci projektu je použito pole hashovacích tabulek, které je celé implementováno jako dvou rozměrné pole. Rozsah pole je definován pomocí konstant SYM\_MAX\_SCOPE a SYM\_TOP\_ITEMS. Tabulka symbolů dále ošetřuje predikci funkcí, které nebyli doposud deklarovány. Za tímto účelem byly přidány do tabulky symbolů příznaky pro zjištění, zdali byla funkce deklarována nebo volána.
    
    \subsection{Kontrola datových typů}
    Kontrola datových typů je založena na porovnávání datových typů ve dvou frontách. V případě že se jedná o přiřazení tak Syntaktická analýza jakmile narazí na přiřazení, tak proměnné do kterých se bude přiřazovat, uloží do globální fronty \textit{token\_queue}. Precedenční analýza výrazů ukládá výsledný datový typ do globální fronty \textit{data\_type\_queue}. Jakmile precedenční analýza zpracuje výrazy, syntaktická analýza provede porovnání těchto zásobníků, jakmile nesedí počet prvků nebo se datové typy neshodují, tak je překlad ukončen sémantickou chybou. \newline
    V případě že se kontroluje výraz za klíčovým slovem \textit{return} tak syntaktický analyzátor nevkládá nic do \textit{token\_queue}, ale volá tabulku symbolů, která vrací návratový typ dané funkce definovaný v prototypu funkce.
\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CODE GENERATE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Generování kódu}
    Funkce pro generování kódu jsou implementovány v rámci souboru \textit{code\_generator.c}. Podpůrné funkce jsou volány ze syntaktické analýzy a precedenční analýzy výrazů. V projektu není implementován optimalizátor. Generovaný kód pracuje se zásobníkem a díky tomu nevzniká velké množství kompilátorových proměných. Většinu konstrukcí jsme schopni generovat přímo, vyjímkou je deklarace uvnitř cyklu. Deklarace proměných uvnitř cyklů je přepsána na přiřazení. Všechny proměnné, které mají být v bloku cyklů deklaravaná se ukládájí do struktury nafukovacího pole a po ukončení bloku for cyklů je vygenerováno návěští, na které se skáče před vstupem do prvního cyklu v rámci bloku cyklů. Za toto návěští jsou generovány deklarace a následně se skáče zpět na začátek cyklu.
    \clearpage
\end{document}
